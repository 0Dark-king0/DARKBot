{"file_contents":{"bot.js":{"content":"require('dotenv').config();\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');\n\nconst TOKEN = process.env.BOT_TOKEN;\nconst CLIENT_ID = process.env.CLIENT_ID || null;\nconst GUILD_ID = process.env.GUILD_ID || null;\n\nif (!TOKEN) {\n  console.error(\"Missing BOT_TOKEN in environment. ضع التوكن في Secrets باسم BOT_TOKEN\");\n  process.exit(1);\n}\n\nconst DATA_DIR = __dirname;\nfunction loadJSON(name, fallback) {\n  try {\n    const p = path.join(DATA_DIR, name);\n    if (fs.existsSync(p)) {\n      return JSON.parse(fs.readFileSync(p, 'utf8'));\n    }\n  } catch (e) {\n    console.error(\"fail load\", name, e);\n  }\n  return fallback;\n}\n\nconst responsesData = loadJSON('responses.json', { common: [], extended: [] });\nconst ideasList = loadJSON('ideas.json', []);\n\nconst CONFIG_FILE = path.join(DATA_DIR, 'config.json');\nlet config = {};\ntry { if (fs.existsSync(CONFIG_FILE)) config = JSON.parse(fs.readFileSync(CONFIG_FILE,'utf8')); } catch(e){console.error(e);}\nfunction saveConfig(){ fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2)); }\nfunction setBotRoom(guildId, channelId){ config[guildId] = config[guildId] || {}; config[guildId].botRoom = channelId; saveConfig(); }\nfunction getBotRoom(guildId){ return config[guildId] ? config[guildId].botRoom : null; }\n\nfunction rand(arr){ return arr[Math.floor(Math.random() * arr.length)]; }\n\nconst userCooldowns = new Map();\nconst COOLDOWN_MS = 5000;\n\nfunction checkCooldown(userId) {\n  const now = Date.now();\n  const last = userCooldowns.get(userId) || 0;\n  if (now - last < COOLDOWN_MS) {\n    const remaining = Math.ceil((COOLDOWN_MS - (now - last)) / 1000);\n    return { onCooldown: true, remaining };\n  }\n  userCooldowns.set(userId, now);\n  return { onCooldown: false };\n}\n\nconst client = new Client({\n  intents: [GatewayIntentBits.Guilds]\n});\n\nclient.once('ready', ()=> {\n  console.log(`✅ Logged in as ${client.user.tag}`);\n  console.log(`🤖 البوت جاهز ويعمل بنظام Slash Commands فقط`);\n});\n\nasync function registerCommands() {\n  const commands = [\n    new SlashCommandBuilder()\n      .setName('idea')\n      .setDescription('يعطيك فكرة إبداعية حسب النوع')\n      .addStringOption(option =>\n        option.setName('type')\n          .setDescription('نوع الفكرة')\n          .setRequired(true)\n          .addChoices(\n            { name: '📹 يوتيوب', value: 'يوتيوب' },\n            { name: '🎵 تيك توك', value: 'تيك توك' },\n            { name: '🎮 لعبة', value: 'لعبة' },\n            { name: '📱 تطبيق', value: 'تطبيق' },\n            { name: '📝 مقال', value: 'مقال' },\n            { name: '🎲 عشوائي', value: 'عشوائي' }\n          ))\n      .toJSON(),\n    \n    new SlashCommandBuilder()\n      .setName('greet')\n      .setDescription('احصل على تحية من البوت')\n      .addStringOption(option =>\n        option.setName('greeting')\n          .setDescription('نوع التحية')\n          .setRequired(false)\n          .addChoices(\n            { name: '👋 سلام', value: 'سلام' },\n            { name: '🌅 صباح', value: 'صباح' },\n            { name: '🌙 مساء', value: 'مساء' },\n            { name: '❓ كيف حالك', value: 'حال' }\n          ))\n      .toJSON(),\n    \n    new SlashCommandBuilder()\n      .setName('advice')\n      .setDescription('احصل على نصيحة أو رد محفز')\n      .addStringOption(option =>\n        option.setName('topic')\n          .setDescription('الموضوع')\n          .setRequired(false)\n          .addChoices(\n            { name: '💪 تحفيز', value: 'تحفيز' },\n            { name: '📚 تعلم', value: 'تعلم' },\n            { name: '💻 برمجة', value: 'برمجة' },\n            { name: '🎨 تصميم', value: 'تصميم' },\n            { name: '🎯 نصيحة عامة', value: 'نصيحة' },\n            { name: '😌 راحة نفسية', value: 'راحة' }\n          ))\n      .toJSON(),\n    \n    new SlashCommandBuilder()\n      .setName('help')\n      .setDescription('شرح كيفية استخدام البوت')\n      .toJSON(),\n    \n    new SlashCommandBuilder()\n      .setName('setbotroom')\n      .setDescription('يحدد روم البوت (للأدمن فقط)')\n      .addChannelOption(opt => opt.setName('channel').setDescription('اختر الروم').setRequired(true))\n      .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild)\n      .toJSON()\n  ];\n\n  const rest = new REST({ version: '10' }).setToken(TOKEN);\n  try {\n    console.log('⏳ جاري تسجيل الأوامر...');\n    if (GUILD_ID && CLIENT_ID) {\n      await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });\n      console.log('✅ تم تسجيل الأوامر في السيرفر المحدد');\n    } else if (CLIENT_ID) {\n      await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });\n      console.log('✅ تم تسجيل الأوامر بشكل عام (قد تستغرق حتى ساعة للظهور)');\n    } else {\n      console.warn('⚠️ CLIENT_ID غير موجود، لن يتم تسجيل الأوامر. أضف CLIENT_ID في Secrets.');\n    }\n  } catch(e) {\n    console.error('❌ فشل تسجيل الأوامر:', e);\n  }\n}\n\nclient.on('interactionCreate', async (interaction) => {\n  try {\n    if (!interaction.isChatInputCommand()) return;\n\n    const cooldown = checkCooldown(interaction.user.id);\n    if (cooldown.onCooldown) {\n      return interaction.reply({ \n        content: `⏰ انتظر ${cooldown.remaining} ثانية قبل استخدام أمر آخر`, \n        ephemeral: true \n      });\n    }\n\n    if (interaction.commandName === 'idea') {\n      const type = interaction.options.getString('type');\n      let idea;\n\n      if (type === 'عشوائي' || !ideasList.length) {\n        idea = ideasList.length ? rand(ideasList) : 'مافي أفكار محمّلة حالياً';\n      } else {\n        let candidates = ideasList.filter(it => it.toLowerCase().startsWith(type.toLowerCase()));\n        if (candidates.length === 0) {\n          candidates = ideasList.filter(it => it.toLowerCase().includes(type.toLowerCase()));\n        }\n        if (candidates.length === 0) {\n          idea = `ما حصلت أفكار مناسبة لـ \"${type}\". هذي فكرة عشوائية:\\n${rand(ideasList)}`;\n        } else {\n          idea = rand(candidates);\n        }\n      }\n\n      await interaction.reply({ \n        content: `💡 **فكرة ${type}:**\\n${idea}`,\n        ephemeral: false\n      });\n\n    } else if (interaction.commandName === 'greet') {\n      const greetType = interaction.options.getString('greeting') || 'سلام';\n      let response;\n\n      if (greetType === 'سلام') {\n        const greetings = responsesData.common.find(r => r.triggers.some(t => t.includes('السلام')));\n        response = greetings ? rand(greetings.responses) : 'وعليكم السلام! 👋';\n      } else if (greetType === 'صباح') {\n        const greetings = responsesData.common.find(r => r.triggers.some(t => t.includes('صباح')));\n        response = greetings ? rand(greetings.responses) : 'صباح النور! ☀️';\n      } else if (greetType === 'مساء') {\n        const greetings = responsesData.common.find(r => r.triggers.some(t => t.includes('مساء')));\n        response = greetings ? rand(greetings.responses) : 'مساء الخير! 🌙';\n      } else if (greetType === 'حال') {\n        const greetings = responsesData.common.find(r => r.triggers.some(t => t.includes('كيف حالك')));\n        response = greetings ? rand(greetings.responses) : 'الحمد لله بخير! وأنت؟ 😊';\n      }\n\n      await interaction.reply({ content: response, ephemeral: false });\n\n    } else if (interaction.commandName === 'advice') {\n      const topic = interaction.options.getString('topic') || 'نصيحة';\n      let response;\n\n      const topicMap = {\n        'تحفيز': ['تحفيز', 'حماس', 'دافع'],\n        'تعلم': ['تعلم', 'دراسة'],\n        'برمجة': ['برمجة', 'كود', 'برمج'],\n        'تصميم': ['تصميم', 'ديزاين'],\n        'نصيحة': ['نصيحة', 'نصحني'],\n        'راحة': ['تعبان', 'ضايق', 'ملل']\n      };\n\n      const keywords = topicMap[topic] || ['نصيحة'];\n      let foundResponse = null;\n\n      for (const keyword of keywords) {\n        foundResponse = responsesData.extended.find(r => \n          r.triggers.some(t => t.toLowerCase().includes(keyword.toLowerCase()))\n        );\n        if (foundResponse) break;\n      }\n\n      response = foundResponse ? rand(foundResponse.responses) : 'أفضل نصيحة: كن نفسك واستمر في التطوير! 💪';\n\n      await interaction.reply({ content: `💭 **${topic}:**\\n${response}`, ephemeral: false });\n\n    } else if (interaction.commandName === 'help') {\n      const helpText = `\n📖 **دليل استخدام البوت:**\n\n**الأوامر المتاحة:**\n\n🎯 \\`/idea [النوع]\\` - احصل على فكرة إبداعية\n   • يوتيوب - أفكار محتوى يوتيوب\n   • تيك توك - أفكار فيديوهات قصيرة\n   • لعبة - أفكار ألعاب\n   • تطبيق - أفكار تطبيقات\n   • مقال - أفكار مقالات\n   • عشوائي - فكرة عشوائية\n\n👋 \\`/greet [نوع]\\` - احصل على تحية\n   • سلام - تحية عامة\n   • صباح - تحية صباحية\n   • مساء - تحية مسائية\n   • كيف حالك - سؤال عن الحال\n\n💡 \\`/advice [الموضوع]\\` - احصل على نصيحة\n   • تحفيز - كلمات محفزة\n   • تعلم - نصائح تعليمية\n   • برمجة - نصائح برمجية\n   • تصميم - نصائح تصميم\n   • نصيحة عامة - نصائح متنوعة\n   • راحة نفسية - كلمات مريحة\n\n⚙️ \\`/setbotroom\\` - تحديد روم البوت (للأدمن)\n\n📌 **ملاحظة:** البوت يعمل الآن بنظام Slash Commands فقط\n`;\n\n      await interaction.reply({ content: helpText, ephemeral: true });\n\n    } else if (interaction.commandName === 'setbotroom') {\n      if (!interaction.memberPermissions.has(PermissionFlagsBits.ManageGuild)) {\n        return interaction.reply({ content: '❌ ما عندك صلاحية تستخدم هالأمر.', ephemeral: true });\n      }\n      const channel = interaction.options.getChannel('channel');\n      setBotRoom(interaction.guildId, channel.id);\n      await interaction.reply({ content: `✅ تم تعيين روم البوت: <#${channel.id}>`, ephemeral: false });\n    }\n\n  } catch(e) { \n    console.error('❌ خطأ في معالجة الأمر:', e);\n    if (!interaction.replied && !interaction.deferred) {\n      await interaction.reply({ content: 'حدث خطأ أثناء تنفيذ الأمر', ephemeral: true });\n    }\n  }\n});\n\n(async () => {\n  await registerCommands();\n  await client.login(TOKEN);\n})();\n\nconst app = express();\napp.get('/', (req, res) => res.send('🤖 Bot is running - Slash Commands Only'));\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`🌐 Health server listening on port ${PORT}`));\n","size_bytes":11450},"privateRoom.js":{"content":"const { SlashCommandBuilder, PermissionFlagsBits, ChannelType, PermissionsBitField } = require('discord.js');\n\nmodule.exports = {\n    data: new SlashCommandBuilder()\n        .setName('private')\n        .setDescription('إنشاء أو حذف غرفة نصية خاصة بالعضو')\n        .addSubcommand(subcommand =>\n            subcommand.setName('create')\n                .setDescription('ينشئ غرفة خاصة لعضو محدد')\n                .addUserOption(option =>\n                    option.setName('member')\n                        .setDescription('اختر العضو الذي تريد إنشاء الغرفة له')\n                        .setRequired(true)\n                )\n        )\n        .addSubcommand(subcommand =>\n            subcommand.setName('delete')\n                .setDescription('يحذف الغرفة الخاصة بالعضو')\n                .addUserOption(option =>\n                    option.setName('member')\n                        .setDescription('اختر العضو الذي تريد حذف غرفته')\n                        .setRequired(true)\n                )\n        ),\n    async execute(interaction) {\n        const subcommand = interaction.options.getSubcommand();\n        const member = interaction.options.getUser('member');\n        const guild = interaction.guild;\n\n        if (!member) return interaction.reply({ content: 'العضو غير موجود!', ephemeral: true });\n\n        const channelName = `private-${member.username.toLowerCase()}`;\n\n        if (subcommand === 'create') {\n            // تحقق إذا الغرفة موجودة\n            const existingChannel = guild.channels.cache.find(ch => ch.name === channelName && ch.type === ChannelType.GuildText);\n            if (existingChannel) return interaction.reply({ content: 'الغرفة الخاصة بهذا العضو موجودة بالفعل!', ephemeral: true });\n\n            // إنشاء القناة\n            const channel = await guild.channels.create({\n                name: channelName,\n                type: ChannelType.GuildText,\n                permissionOverwrites: [\n                    {\n                        id: guild.id,\n                        deny: [PermissionsBitField.Flags.ViewChannel],\n                    },\n                    {\n                        id: member.id,\n                        allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],\n                    },\n                    {\n                        id: interaction.client.user.id,\n                        allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ManageChannels],\n                    },\n                ],\n            });\n\n            await interaction.reply({ content: `تم إنشاء غرفة خاصة للعضو ${member.username}: <#${channel.id}>`, ephemeral: true });\n        } else if (subcommand === 'delete') {\n            const existingChannel = guild.channels.cache.find(ch => ch.name === channelName && ch.type === ChannelType.GuildText);\n            if (!existingChannel) return interaction.reply({ content: 'لم يتم العثور على غرفة خاصة بهذا العضو!', ephemeral: true });\n\n            await existingChannel.delete();\n            await interaction.reply({ content: `تم حذف الغرفة الخاصة بالعضو ${member.username}`, ephemeral: true });\n        }\n    },\n};\n","size_bytes":3461},"replit.md":{"content":"# Overview\n\nThis is a Discord bot designed for Arabic-language communities that provides automated responses and creative ideas through slash commands. The bot operates entirely through Discord's slash command system, making it simple to use and requiring minimal permissions. It includes a comprehensive response library, an ideas generator with 600+ categorized ideas, and per-guild channel configuration.\n\n**Recent Changes (Oct 2025):**\n- Converted from message-based to slash-command-only operation to avoid MESSAGE_CONTENT Intent requirement\n- Added new commands: `/greet`, `/advice`, and `/help`\n- Enhanced `/idea` command with category selection via dropdown choices\n- Removed message monitoring and processing to simplify permissions\n\n# User Preferences\n\n- Preferred communication style: Simple, everyday language\n- User name: Dark (دارك)\n- Project focus: Arabic-language Discord bot for community engagement\n\n# System Architecture\n\n## Application Structure\n\n**Single-file Node.js application**: The entire bot logic resides in `bot.js`, keeping the codebase simple and self-contained. This monolithic approach was chosen for ease of deployment on Replit and straightforward maintenance for a focused use case.\n\n**File-based data persistence**: All configuration and content data is stored in JSON files on disk rather than using a database. This design decision prioritizes:\n- Simplicity: No database setup or connection management required\n- Portability: Data travels with the code\n- Replit compatibility: Works seamlessly with Replit's filesystem\n- Trade-off: Not suitable for high-concurrency scenarios, but adequate for single-bot operations\n\n**Data files**:\n- `config.json`: Stores per-guild settings (designated bot channels)\n- `responses.json`: Contains the response library with triggers and replies (structured as `{common: [], extended: []}`)\n- `ideas.json`: Array of 600+ idea suggestions for random selection, categorized by type (يوتيوب, تيك توك, لعبة, تطبيق, مقال)\n\n## Bot Framework\n\n**Discord.js v14**: Uses the official Discord.js library for all bot interactions. The bot uses minimal gateway intents:\n- `GatewayIntentBits.Guilds`: Server/guild access only\n- **No MESSAGE_CONTENT Intent required**: Bot operates entirely through slash commands, avoiding the need for privileged intents\n\n## Command System\n\n**Slash commands** implemented using Discord.js REST API and command builders:\n\n1. **`/idea [type]`** - Generates creative ideas based on category:\n   - Options: يوتيوب, تيك توك, لعبة, تطبيق, مقال, عشوائي\n   - Searches ideas.json for matching category and returns random suggestion\n   - Falls back to random idea if no matches found\n\n2. **`/greet [greeting]`** - Provides contextual greetings:\n   - Options: سلام, صباح, مساء, كيف حالك\n   - Pulls responses from responses.json common greetings\n   - Returns culturally appropriate Arabic greetings\n\n3. **`/advice [topic]`** - Gives advice and motivation:\n   - Topics: تحفيز, تعلم, برمجة, تصميم, نصيحة عامة, راحة نفسية\n   - Searches responses.json extended library for relevant advice\n   - Returns motivational or practical guidance\n\n4. **`/help`** - Displays comprehensive bot usage guide\n   - Shows all available commands with descriptions\n   - Ephemeral response (only visible to user)\n\n5. **`/setbotroom [channel]`** - Sets designated bot room (Admin only)\n   - Requires MANAGE_GUILD permission\n   - Stores configuration per guild in config.json\n   - Used for future per-channel features\n\n## Response Library Structure\n\n**responses.json** contains two categories:\n\n1. **common**: Basic greetings and common interactions\n   - Greetings: سلام, صباح, مساء\n   - Basic responses: شكر, وداع, أهلا\n   - Used by `/greet` command\n\n2. **extended**: Detailed advice and topic-specific responses\n   - Topics: programming, design, learning, motivation, health\n   - Rich content for `/advice` command\n   - Multiple response variations for diversity\n\n## Ideas Library Structure\n\n**ideas.json**: Array of 600+ creative ideas, each prefixed with category:\n- Format: `\"يوتيوب: فكرة المحتوى...\"`\n- Categories cover: YouTube content, TikTok videos, game concepts, app ideas, article topics\n- Filtering logic: searches by prefix first, then by contains\n\n## Cooldown System\n\n**User-based cooldown**: 5-second cooldown per user to prevent spam\n- Tracked in memory using Map<userId, timestamp>\n- Returns friendly Arabic message with remaining time\n- Cooldown applies across all commands\n\n## Keep-Alive Mechanism\n\n**Express web server**: A minimal HTTP server runs alongside the Discord bot to satisfy Replit's always-on requirement. This prevents the Replit from sleeping due to inactivity.\n- Endpoint: `GET /` returns \"🤖 Bot is running - Slash Commands Only\"\n- Listens on port 3000 (configurable via PORT env var)\n\n## Configuration Management\n\n**Environment-based secrets**: \n- `BOT_TOKEN` (required): Discord bot authentication token\n- `CLIENT_ID` (recommended): Application ID for command registration\n- `GUILD_ID` (optional): Specific guild ID for faster command deployment\n\n**Runtime configuration updates**: The `config.json` file is read on startup and written synchronously when settings change (e.g., when setting bot room per guild). Each guild's configuration is namespaced by guild ID.\n\n## Error Handling\n\n**Graceful degradation**: \n- Missing data files return fallback values (empty arrays/objects) rather than crashing\n- JSON parsing errors are logged but don't terminate the bot\n- Interaction errors are caught and report friendly message to user\n- Command failures don't crash the bot process\n\n# External Dependencies\n\n## Discord API\n- **discord.js** (v14.14.0): Complete Discord bot framework\n- **No privileged intents required**: Works with Guilds intent only\n- Uses REST API for slash command registration\n\n## Runtime Environment\n- **Node.js** (20.x): JavaScript runtime\n- **dotenv** (v16.4.0): Environment variable management\n- **express** (v4.18.2): HTTP server for Replit keep-alive\n\n## Platform Requirements\n- **Replit Secrets**: Must configure `BOT_TOKEN` (required), recommended to add `CLIENT_ID` for command registration\n- **Discord Developer Portal**: Bot only needs basic \"Guilds\" intent enabled (no privileged intents)\n- **Bot Permissions**: Send Messages, Use Slash Commands (permissions value: 2048 for basic operation)\n\n## No Database\nThis application intentionally uses file-based storage instead of a database system. All data persistence occurs through synchronous file I/O operations on JSON files.\n\n# Development Notes\n\n## Advantages of Slash-Commands-Only Approach\n- No MESSAGE_CONTENT Intent needed (avoids Discord verification for 100+ servers)\n- Simpler permission model\n- Built-in command discovery (users can see available commands)\n- Type-safe parameter handling with Discord's choice system\n- No message parsing or regex complexity\n\n## Trade-offs\n- Less \"natural\" interaction compared to message triggers\n- Users must learn commands instead of organic conversation\n- Cannot respond to regular messages or mentions\n- Requires users to type `/` to interact\n\n## Future Enhancement Possibilities\n- Add button/select menu interactions for multi-step flows\n- Implement modal forms for complex inputs\n- Add context menu commands for message/user actions\n- Create scheduled tasks for daily ideas or motivation\n- Add statistics tracking for popular commands/ideas\n","size_bytes":7519}},"version":1}